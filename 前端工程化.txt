https://segmentfault.com/a/1190000037752931
https://segmentfault.com/a/1190000037752931
https://segmentfault.com/a/1190000037752931
# 手把手带你入门前端工程化——超详细教程
1.技术选型
2.统一规范
3.测试
4.部署
5.监控
6.性能优化
7.重构
## 1.技术选型

选你或团队最熟的，保证在遇到棘手的问题时有人能填坑。
选市场占有率高的。换句话说，就是选好招人的。
## 2.统一规范
## 代码规范
当团队的成员都严格按照代码规范来写代码时，可以保证每个人的代码看起来都像是一个人写的，
看别人的代码就像是在看自己的代码。更重要的是我们能够认识到规范的重要性，并坚持规范的开发习惯。

装eslint
## git 规范
包括两点：分支管理规范、git commit 规范
## 分支管理规范
拉新分支修改 完了合入

## git commit 规范
```html
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
```
大致分为三个部分(使用空行分割):

标题行: 必填, 描述主要修改类型和内容
主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等
页脚注释: 可以写注释，BUG 号链接

type: commit 的类型
feat: 新功能、新特性
fix: 修改 bug
perf: 更改代码，以提高性能
refactor: 代码重构（重构，在不影响代码内部行为、功能下的代码修改）
docs: 文档修改
style: 代码格式修改, 注意不是 css 修改（例如分号修改）
test: 测试用例新增、修改
build: 影响项目构建或依赖项修改
revert: 恢复上一次提交
ci: 持续集成相关文件修改
chore: 其他修改（不在上述类型中的修改）
release: 发布新版本
workflow: 工作流相关文件修改
scope: commit 影响的范围, 比如: route, component, utils, build...
subject: commit 的概述
body: commit 具体修改内容, 可以分为多行.
footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.
## 3.测试
## 4.部署
## 5.监控
## 6.性能优化
## 7.重构
//dome
# 前端工程化 DEMO
## 文档
* [手把手带你入门前端工程化——超详细教程](https://juejin.im/post/6892003555818143752/)
* [ESlint + stylelint + VSCode自动格式化代码(2020)](https://juejin.im/post/6892000216020189198)
